# -*- coding: utf-8 -*-
"""Stock Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1My6HSR9PgVh1dytnLNh0TKNSdwcxFdGk
"""

#Import independentcies
import quandl
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split

#Get the Stock data
df = quandl.get("BCHARTS/LOCALBTCTHB")
print(df.tail())

# Get the Adjusted Close Price 
df = df [['Adj. Close']]
print(df.head())

# number for prediction in day 
forecast_out = 30 
#Create another column (the taget or dependent var) shifted unit up
df['Prediction'] = df[['Adj. Close']].shift(-forecast_out)
print(df.tail())

### Create the independent data set 
#Convert the datafram to numpy array
X = np.array(df.drop(['Prediction'],1))
#Remove the last 'n' row
X = X[:-forecast_out]
print(X)

#create the dependent data set (y)
### Convert the dataframe to numpy array
y = np.array(df['Prediction'])
#Get all of (y) value except last 'n' row
y = y[:-forecast_out]
print(y)

#Split the data into 80% train and 20% testing
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2
                                                    )

#Create and train the support Vector Machine (Regressor)
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
svr_rbf.fit(X_train, y_train)

#Testing Model: Scorereturn coff of determination R*R
svm_confidence = svr_rbf.score(X_test, y_test)
print("svm_confidence: ", svm_confidence)

#Create and train the Linear (Regressor)
lr = LinearRegression()
#train
lr.fit(X_train, y_train)

#Testing Model: Scorereturn coff of determination R*R
lr_confidence = lr.score(X_test, y_test)
print("lr onfidence: ", lr_confidence)

#Set x_forecast equal to the last 30 row
x_forecast = np.array(df.drop(['Prediction'],1))[-forecast_out:]
print(x_forecast)

# Print linear regreestion the prediction for next 'n' days
lr_prediction = lr.predict(x_forecast)
print(lr_prediction)
# Print Vector regreestion the prediction for next 'n' days
svm_prediction = svr_rbf.predict(x_forecast)
print(svm_prediction)

